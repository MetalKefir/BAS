//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.27703.1
// 
namespace BAS.CustomerService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Customer", Namespace="http://schemas.datacontract.org/2004/07/DataModelLibrary")]
    public partial class Customer : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ushort AgeField;
        
        private string CustomerAddressField;
        
        private string EmailField;
        
        private string FNameField;
        
        private System.Nullable<int> IdField;
        
        private string LNameField;
        
        private string MNameField;
        
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort Age {
            get {
                return this.AgeField;
            }
            set {
                if ((this.AgeField.Equals(value) != true)) {
                    this.AgeField = value;
                    this.RaisePropertyChanged("Age");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerAddress {
            get {
                return this.CustomerAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.CustomerAddressField, value) != true)) {
                    this.CustomerAddressField = value;
                    this.RaisePropertyChanged("CustomerAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FName {
            get {
                return this.FNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FNameField, value) != true)) {
                    this.FNameField = value;
                    this.RaisePropertyChanged("FName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LName {
            get {
                return this.LNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LNameField, value) != true)) {
                    this.LNameField = value;
                    this.RaisePropertyChanged("LName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MName {
            get {
                return this.MNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MNameField, value) != true)) {
                    this.MNameField = value;
                    this.RaisePropertyChanged("MName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValueTupleOfbooleananyType", Namespace="http://schemas.datacontract.org/2004/07/System")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAS.CustomerService.Customer))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<BAS.CustomerService.Customer>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAS.CustomerService.ValueTupleOfbooleanstring))]
    public partial struct ValueTupleOfbooleananyType : System.ComponentModel.INotifyPropertyChanged {
        
        private bool Item1Field;
        
        private object Item2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Item1 {
            get {
                return this.Item1Field;
            }
            set {
                if ((this.Item1Field.Equals(value) != true)) {
                    this.Item1Field = value;
                    this.RaisePropertyChanged("Item1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public object Item2 {
            get {
                return this.Item2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Item2Field, value) != true)) {
                    this.Item2Field = value;
                    this.RaisePropertyChanged("Item2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValueTupleOfbooleanstring", Namespace="http://schemas.datacontract.org/2004/07/System")]
    public partial struct ValueTupleOfbooleanstring : System.ComponentModel.INotifyPropertyChanged {
        
        private bool Item1Field;
        
        private string Item2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Item1 {
            get {
                return this.Item1Field;
            }
            set {
                if ((this.Item1Field.Equals(value) != true)) {
                    this.Item1Field = value;
                    this.RaisePropertyChanged("Item1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Item2 {
            get {
                return this.Item2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Item2Field, value) != true)) {
                    this.Item2Field = value;
                    this.RaisePropertyChanged("Item2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ServiceModel", ConfigurationName="CustomerService.CustomersService")]
    public interface CustomersService {
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/Create", ReplyAction="ServiceModel/BaseService/CreateResponse")]
        System.Threading.Tasks.Task<BAS.CustomerService.ValueTupleOfbooleananyType> CreateAsync(BAS.CustomerService.Customer parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/Update", ReplyAction="ServiceModel/BaseService/UpdateResponse")]
        System.Threading.Tasks.Task<BAS.CustomerService.ValueTupleOfbooleanstring> UpdateAsync(System.Collections.Generic.List<BAS.CustomerService.Customer> parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/Delete", ReplyAction="ServiceModel/BaseService/DeleteResponse")]
        System.Threading.Tasks.Task<BAS.CustomerService.ValueTupleOfbooleanstring> DeleteAsync(System.Collections.Generic.List<BAS.CustomerService.Customer> parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/GetAll", ReplyAction="ServiceModel/BaseService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.CustomerService.Customer>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/GetFromTo", ReplyAction="ServiceModel/BaseService/GetFromToResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.CustomerService.Customer>> GetFromToAsync(uint from, uint to);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/GetBy", ReplyAction="ServiceModel/BaseService/GetByResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BAS.CustomerService.Customer))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<BAS.CustomerService.Customer>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BAS.CustomerService.ValueTupleOfbooleananyType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BAS.CustomerService.ValueTupleOfbooleanstring))]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.CustomerService.Customer>> GetByAsync(string fieldName, object value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CustomersServiceChannel : BAS.CustomerService.CustomersService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomersServiceClient : System.ServiceModel.ClientBase<BAS.CustomerService.CustomersService>, BAS.CustomerService.CustomersService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CustomersServiceClient() : 
                base(CustomersServiceClient.GetDefaultBinding(), CustomersServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_CustomersService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CustomersServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CustomersServiceClient.GetBindingForEndpoint(endpointConfiguration), CustomersServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CustomersServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CustomersServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CustomersServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CustomersServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CustomersServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<BAS.CustomerService.ValueTupleOfbooleananyType> CreateAsync(BAS.CustomerService.Customer parameter) {
            return base.Channel.CreateAsync(parameter);
        }
        
        public System.Threading.Tasks.Task<BAS.CustomerService.ValueTupleOfbooleanstring> UpdateAsync(System.Collections.Generic.List<BAS.CustomerService.Customer> parameters) {
            return base.Channel.UpdateAsync(parameters);
        }
        
        public System.Threading.Tasks.Task<BAS.CustomerService.ValueTupleOfbooleanstring> DeleteAsync(System.Collections.Generic.List<BAS.CustomerService.Customer> parameters) {
            return base.Channel.DeleteAsync(parameters);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.CustomerService.Customer>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.CustomerService.Customer>> GetFromToAsync(uint from, uint to) {
            return base.Channel.GetFromToAsync(from, to);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.CustomerService.Customer>> GetByAsync(string fieldName, object value) {
            return base.Channel.GetByAsync(fieldName, value);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_CustomersService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_CustomersService)) {
                return new System.ServiceModel.EndpointAddress("http://93.157.234.12/api/CustomersService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return CustomersServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_CustomersService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return CustomersServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_CustomersService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_CustomersService,
        }
    }
}
