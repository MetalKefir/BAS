//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.27703.1
// 
namespace BAS.ProductService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/DataModelLibrary")]
    public partial class Product : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<int> ArticulusField;
        
        private string ColorField;
        
        private string DescriptionField;
        
        private string ManufacturerField;
        
        private string NameField;
        
        private decimal PriceField;
        
        private uint QuantityField;
        
        private System.Nullable<ushort> SaleField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Articulus {
            get {
                return this.ArticulusField;
            }
            set {
                if ((this.ArticulusField.Equals(value) != true)) {
                    this.ArticulusField = value;
                    this.RaisePropertyChanged("Articulus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Manufacturer {
            get {
                return this.ManufacturerField;
            }
            set {
                if ((object.ReferenceEquals(this.ManufacturerField, value) != true)) {
                    this.ManufacturerField = value;
                    this.RaisePropertyChanged("Manufacturer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Sale {
            get {
                return this.SaleField;
            }
            set {
                if ((this.SaleField.Equals(value) != true)) {
                    this.SaleField = value;
                    this.RaisePropertyChanged("Sale");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValueTupleOfbooleananyType", Namespace="http://schemas.datacontract.org/2004/07/System")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAS.ProductService.Product))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<BAS.ProductService.Product>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BAS.ProductService.ValueTupleOfbooleanstring))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<int>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
    public partial struct ValueTupleOfbooleananyType : System.ComponentModel.INotifyPropertyChanged {
        
        private bool Item1Field;
        
        private object Item2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Item1 {
            get {
                return this.Item1Field;
            }
            set {
                if ((this.Item1Field.Equals(value) != true)) {
                    this.Item1Field = value;
                    this.RaisePropertyChanged("Item1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public object Item2 {
            get {
                return this.Item2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Item2Field, value) != true)) {
                    this.Item2Field = value;
                    this.RaisePropertyChanged("Item2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValueTupleOfbooleanstring", Namespace="http://schemas.datacontract.org/2004/07/System")]
    public partial struct ValueTupleOfbooleanstring : System.ComponentModel.INotifyPropertyChanged {
        
        private bool Item1Field;
        
        private string Item2Field;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Item1 {
            get {
                return this.Item1Field;
            }
            set {
                if ((this.Item1Field.Equals(value) != true)) {
                    this.Item1Field = value;
                    this.RaisePropertyChanged("Item1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Item2 {
            get {
                return this.Item2Field;
            }
            set {
                if ((object.ReferenceEquals(this.Item2Field, value) != true)) {
                    this.Item2Field = value;
                    this.RaisePropertyChanged("Item2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ServiceModel", ConfigurationName="ProductService.ProductsService")]
    public interface ProductsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/Create", ReplyAction="ServiceModel/BaseService/CreateResponse")]
        System.Threading.Tasks.Task<BAS.ProductService.ValueTupleOfbooleananyType> CreateAsync(BAS.ProductService.Product parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/Update", ReplyAction="ServiceModel/BaseService/UpdateResponse")]
        System.Threading.Tasks.Task<BAS.ProductService.ValueTupleOfbooleanstring> UpdateAsync(System.Collections.Generic.List<BAS.ProductService.Product> parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/Delete", ReplyAction="ServiceModel/BaseService/DeleteResponse")]
        System.Threading.Tasks.Task<BAS.ProductService.ValueTupleOfbooleanstring> DeleteAsync(System.Collections.Generic.List<BAS.ProductService.Product> parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/GetAll", ReplyAction="ServiceModel/BaseService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.ProductService.Product>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/GetFromTo", ReplyAction="ServiceModel/BaseService/GetFromToResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.ProductService.Product>> GetFromToAsync(uint from, uint to);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/GetBy", ReplyAction="ServiceModel/BaseService/GetByResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BAS.ProductService.Product))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<BAS.ProductService.Product>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BAS.ProductService.ValueTupleOfbooleananyType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BAS.ProductService.ValueTupleOfbooleanstring))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<int>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.ProductService.Product>> GetByAsync(string fieldName, object value);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/ProductsService/GetByPrice", ReplyAction="ServiceModel/ProductsService/GetByPriceResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.ProductService.Product>> GetByPriceAsync(int minprice, System.Nullable<int> maxprice);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/ProductsService/GetById", ReplyAction="ServiceModel/ProductsService/GetByIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.ProductService.Product>> GetByIdAsync(System.Collections.Generic.List<int> ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/ProductsService/GetAllTypes", ReplyAction="ServiceModel/ProductsService/GetAllTypesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/ProductsService/GetAllManufacturers", ReplyAction="ServiceModel/ProductsService/GetAllManufacturersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllManufacturersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/ProductsService/GetAllColors", ReplyAction="ServiceModel/ProductsService/GetAllColorsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllColorsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ProductsServiceChannel : BAS.ProductService.ProductsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductsServiceClient : System.ServiceModel.ClientBase<BAS.ProductService.ProductsService>, BAS.ProductService.ProductsService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ProductsServiceClient() : 
                base(ProductsServiceClient.GetDefaultBinding(), ProductsServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ProductsService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProductsServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ProductsServiceClient.GetBindingForEndpoint(endpointConfiguration), ProductsServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProductsServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ProductsServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProductsServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ProductsServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProductsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<BAS.ProductService.ValueTupleOfbooleananyType> CreateAsync(BAS.ProductService.Product parameter) {
            return base.Channel.CreateAsync(parameter);
        }
        
        public System.Threading.Tasks.Task<BAS.ProductService.ValueTupleOfbooleanstring> UpdateAsync(System.Collections.Generic.List<BAS.ProductService.Product> parameters) {
            return base.Channel.UpdateAsync(parameters);
        }
        
        public System.Threading.Tasks.Task<BAS.ProductService.ValueTupleOfbooleanstring> DeleteAsync(System.Collections.Generic.List<BAS.ProductService.Product> parameters) {
            return base.Channel.DeleteAsync(parameters);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.ProductService.Product>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.ProductService.Product>> GetFromToAsync(uint from, uint to) {
            return base.Channel.GetFromToAsync(from, to);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.ProductService.Product>> GetByAsync(string fieldName, object value) {
            return base.Channel.GetByAsync(fieldName, value);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.ProductService.Product>> GetByPriceAsync(int minprice, System.Nullable<int> maxprice) {
            return base.Channel.GetByPriceAsync(minprice, maxprice);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<BAS.ProductService.Product>> GetByIdAsync(System.Collections.Generic.List<int> ids) {
            return base.Channel.GetByIdAsync(ids);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllTypesAsync() {
            return base.Channel.GetAllTypesAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllManufacturersAsync() {
            return base.Channel.GetAllManufacturersAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllColorsAsync() {
            return base.Channel.GetAllColorsAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ProductsService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ProductsService)) {
                return new System.ServiceModel.EndpointAddress("http://93.157.234.12/api/ProductsService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ProductsServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ProductsService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ProductsServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ProductsService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ProductsService,
        }
    }
}
