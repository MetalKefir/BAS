//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestService.CustomerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="ServiceModel", ConfigurationName="CustomerService.CustomersService")]
    public interface CustomersService {
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/Create", ReplyAction="ServiceModel/BaseService/CreateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.ValueTuple<bool, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataModelLibrary.Customer))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DataModelLibrary.Customer>))]
        System.ValueTuple<bool, object> Create(DataModelLibrary.Customer parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/Create", ReplyAction="ServiceModel/BaseService/CreateResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<bool, object>> CreateAsync(DataModelLibrary.Customer parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/Update", ReplyAction="ServiceModel/BaseService/UpdateResponse")]
        System.ValueTuple<bool, string> Update(System.Collections.Generic.List<DataModelLibrary.Customer> parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/Update", ReplyAction="ServiceModel/BaseService/UpdateResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<bool, string>> UpdateAsync(System.Collections.Generic.List<DataModelLibrary.Customer> parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/Delete", ReplyAction="ServiceModel/BaseService/DeleteResponse")]
        System.ValueTuple<bool, string> Delete(System.Collections.Generic.List<DataModelLibrary.Customer> parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/Delete", ReplyAction="ServiceModel/BaseService/DeleteResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<bool, string>> DeleteAsync(System.Collections.Generic.List<DataModelLibrary.Customer> parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/GetAll", ReplyAction="ServiceModel/BaseService/GetAllResponse")]
        System.Collections.Generic.List<DataModelLibrary.Customer> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/GetAll", ReplyAction="ServiceModel/BaseService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DataModelLibrary.Customer>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/GetFromTo", ReplyAction="ServiceModel/BaseService/GetFromToResponse")]
        System.Collections.Generic.List<DataModelLibrary.Customer> GetFromTo(uint from, uint to);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/GetFromTo", ReplyAction="ServiceModel/BaseService/GetFromToResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DataModelLibrary.Customer>> GetFromToAsync(uint from, uint to);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/GetBy", ReplyAction="ServiceModel/BaseService/GetByResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.ValueTuple<bool, object>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.ValueTuple<bool, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DataModelLibrary.Customer))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.List<DataModelLibrary.Customer>))]
        System.Collections.Generic.List<DataModelLibrary.Customer> GetBy(string fieldName, object value);
        
        [System.ServiceModel.OperationContractAttribute(Action="ServiceModel/BaseService/GetBy", ReplyAction="ServiceModel/BaseService/GetByResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DataModelLibrary.Customer>> GetByAsync(string fieldName, object value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CustomersServiceChannel : TestService.CustomerService.CustomersService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomersServiceClient : System.ServiceModel.ClientBase<TestService.CustomerService.CustomersService>, TestService.CustomerService.CustomersService {
        
        public CustomersServiceClient() {
        }
        
        public CustomersServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CustomersServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomersServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomersServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.ValueTuple<bool, object> Create(DataModelLibrary.Customer parameter) {
            return base.Channel.Create(parameter);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<bool, object>> CreateAsync(DataModelLibrary.Customer parameter) {
            return base.Channel.CreateAsync(parameter);
        }
        
        public System.ValueTuple<bool, string> Update(System.Collections.Generic.List<DataModelLibrary.Customer> parameters) {
            return base.Channel.Update(parameters);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<bool, string>> UpdateAsync(System.Collections.Generic.List<DataModelLibrary.Customer> parameters) {
            return base.Channel.UpdateAsync(parameters);
        }
        
        public System.ValueTuple<bool, string> Delete(System.Collections.Generic.List<DataModelLibrary.Customer> parameters) {
            return base.Channel.Delete(parameters);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<bool, string>> DeleteAsync(System.Collections.Generic.List<DataModelLibrary.Customer> parameters) {
            return base.Channel.DeleteAsync(parameters);
        }
        
        public System.Collections.Generic.List<DataModelLibrary.Customer> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DataModelLibrary.Customer>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public System.Collections.Generic.List<DataModelLibrary.Customer> GetFromTo(uint from, uint to) {
            return base.Channel.GetFromTo(from, to);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DataModelLibrary.Customer>> GetFromToAsync(uint from, uint to) {
            return base.Channel.GetFromToAsync(from, to);
        }
        
        public System.Collections.Generic.List<DataModelLibrary.Customer> GetBy(string fieldName, object value) {
            return base.Channel.GetBy(fieldName, value);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DataModelLibrary.Customer>> GetByAsync(string fieldName, object value) {
            return base.Channel.GetByAsync(fieldName, value);
        }
    }
}
