//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestService.ServicesBAS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/BAS.DataModelLibrary")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArticulusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ManufacturerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<ushort> SaleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Articulus {
            get {
                return this.ArticulusField;
            }
            set {
                if ((this.ArticulusField.Equals(value) != true)) {
                    this.ArticulusField = value;
                    this.RaisePropertyChanged("Articulus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Color {
            get {
                return this.ColorField;
            }
            set {
                if ((object.ReferenceEquals(this.ColorField, value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Manufacturer {
            get {
                return this.ManufacturerField;
            }
            set {
                if ((object.ReferenceEquals(this.ManufacturerField, value) != true)) {
                    this.ManufacturerField = value;
                    this.RaisePropertyChanged("Manufacturer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((this.QuantityField.Equals(value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Sale {
            get {
                return this.SaleField;
            }
            set {
                if ((this.SaleField.Equals(value) != true)) {
                    this.SaleField = value;
                    this.RaisePropertyChanged("Sale");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="BAS.ServiceModel", ConfigurationName="ServicesBAS.ProductsService")]
    public interface ProductsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/Delete", ReplyAction="BAS.ServiceModel/ProductsService/DeleteResponse")]
        TestService.ServicesBAS.Product[] Delete(TestService.ServicesBAS.Product[] products);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/Delete", ReplyAction="BAS.ServiceModel/ProductsService/DeleteResponse")]
        System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> DeleteAsync(TestService.ServicesBAS.Product[] products);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/Create", ReplyAction="BAS.ServiceModel/ProductsService/CreateResponse")]
        TestService.ServicesBAS.Product[] Create(TestService.ServicesBAS.Product[] products);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/Create", ReplyAction="BAS.ServiceModel/ProductsService/CreateResponse")]
        System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> CreateAsync(TestService.ServicesBAS.Product[] products);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/Update", ReplyAction="BAS.ServiceModel/ProductsService/UpdateResponse")]
        TestService.ServicesBAS.Product[] Update(TestService.ServicesBAS.Product[] products);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/Update", ReplyAction="BAS.ServiceModel/ProductsService/UpdateResponse")]
        System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> UpdateAsync(TestService.ServicesBAS.Product[] products);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/GetAll", ReplyAction="BAS.ServiceModel/ProductsService/GetAllResponse")]
        TestService.ServicesBAS.Product[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/GetAll", ReplyAction="BAS.ServiceModel/ProductsService/GetAllResponse")]
        System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/GetByID", ReplyAction="BAS.ServiceModel/ProductsService/GetByIDResponse")]
        TestService.ServicesBAS.Product GetByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/GetByID", ReplyAction="BAS.ServiceModel/ProductsService/GetByIDResponse")]
        System.Threading.Tasks.Task<TestService.ServicesBAS.Product> GetByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/GetByType", ReplyAction="BAS.ServiceModel/ProductsService/GetByTypeResponse")]
        TestService.ServicesBAS.Product[] GetByType(string[] types);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/GetByType", ReplyAction="BAS.ServiceModel/ProductsService/GetByTypeResponse")]
        System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> GetByTypeAsync(string[] types);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/GetByColor", ReplyAction="BAS.ServiceModel/ProductsService/GetByColorResponse")]
        TestService.ServicesBAS.Product[] GetByColor(string[] colors);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/GetByColor", ReplyAction="BAS.ServiceModel/ProductsService/GetByColorResponse")]
        System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> GetByColorAsync(string[] colors);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/GetByManufacturer", ReplyAction="BAS.ServiceModel/ProductsService/GetByManufacturerResponse")]
        TestService.ServicesBAS.Product[] GetByManufacturer(string[] manufacturers);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/GetByManufacturer", ReplyAction="BAS.ServiceModel/ProductsService/GetByManufacturerResponse")]
        System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> GetByManufacturerAsync(string[] manufacturers);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/GetByPrice", ReplyAction="BAS.ServiceModel/ProductsService/GetByPriceResponse")]
        TestService.ServicesBAS.Product[] GetByPrice(int minprice, System.Nullable<int> maxprice);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/GetByPrice", ReplyAction="BAS.ServiceModel/ProductsService/GetByPriceResponse")]
        System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> GetByPriceAsync(int minprice, System.Nullable<int> maxprice);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/GetByName", ReplyAction="BAS.ServiceModel/ProductsService/GetByNameResponse")]
        TestService.ServicesBAS.Product[] GetByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="BAS.ServiceModel/ProductsService/GetByName", ReplyAction="BAS.ServiceModel/ProductsService/GetByNameResponse")]
        System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> GetByNameAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ProductsServiceChannel : TestService.ServicesBAS.ProductsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductsServiceClient : System.ServiceModel.ClientBase<TestService.ServicesBAS.ProductsService>, TestService.ServicesBAS.ProductsService {
        
        public ProductsServiceClient() {
        }
        
        public ProductsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestService.ServicesBAS.Product[] Delete(TestService.ServicesBAS.Product[] products) {
            return base.Channel.Delete(products);
        }
        
        public System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> DeleteAsync(TestService.ServicesBAS.Product[] products) {
            return base.Channel.DeleteAsync(products);
        }
        
        public TestService.ServicesBAS.Product[] Create(TestService.ServicesBAS.Product[] products) {
            return base.Channel.Create(products);
        }
        
        public System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> CreateAsync(TestService.ServicesBAS.Product[] products) {
            return base.Channel.CreateAsync(products);
        }
        
        public TestService.ServicesBAS.Product[] Update(TestService.ServicesBAS.Product[] products) {
            return base.Channel.Update(products);
        }
        
        public System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> UpdateAsync(TestService.ServicesBAS.Product[] products) {
            return base.Channel.UpdateAsync(products);
        }
        
        public TestService.ServicesBAS.Product[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public TestService.ServicesBAS.Product GetByID(int ID) {
            return base.Channel.GetByID(ID);
        }
        
        public System.Threading.Tasks.Task<TestService.ServicesBAS.Product> GetByIDAsync(int ID) {
            return base.Channel.GetByIDAsync(ID);
        }
        
        public TestService.ServicesBAS.Product[] GetByType(string[] types) {
            return base.Channel.GetByType(types);
        }
        
        public System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> GetByTypeAsync(string[] types) {
            return base.Channel.GetByTypeAsync(types);
        }
        
        public TestService.ServicesBAS.Product[] GetByColor(string[] colors) {
            return base.Channel.GetByColor(colors);
        }
        
        public System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> GetByColorAsync(string[] colors) {
            return base.Channel.GetByColorAsync(colors);
        }
        
        public TestService.ServicesBAS.Product[] GetByManufacturer(string[] manufacturers) {
            return base.Channel.GetByManufacturer(manufacturers);
        }
        
        public System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> GetByManufacturerAsync(string[] manufacturers) {
            return base.Channel.GetByManufacturerAsync(manufacturers);
        }
        
        public TestService.ServicesBAS.Product[] GetByPrice(int minprice, System.Nullable<int> maxprice) {
            return base.Channel.GetByPrice(minprice, maxprice);
        }
        
        public System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> GetByPriceAsync(int minprice, System.Nullable<int> maxprice) {
            return base.Channel.GetByPriceAsync(minprice, maxprice);
        }
        
        public TestService.ServicesBAS.Product[] GetByName(string name) {
            return base.Channel.GetByName(name);
        }
        
        public System.Threading.Tasks.Task<TestService.ServicesBAS.Product[]> GetByNameAsync(string name) {
            return base.Channel.GetByNameAsync(name);
        }
    }
}
